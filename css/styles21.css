/* <!-- YT CSS D.Gray Lesson 21 CSS Functions --> */
@import url("https://fonts.googleapis.com/css2?family=Nunito&display=swap");

/* || RESET */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* || VARIABLES */
:root {
    /* FONT */
    --FF: "Nunito", sans-serif;

    /* from lesson 20 variables */
    /* --FS: 1.5rem; */

    /* min() function evaluates all provided values and returns the smallest value. */
    /* ALWAYS an absolute value and then a relative unit */
    /* ------largest it will get */

    /* --FS: min(2.25rem, 3vh); */

    /* The max() function in CSS calculates the largest value from a set of provided arguments. It is useful for setting a property to the maximum value among multiple options, ensuring that a property doesn’t fall below a desired threshold. */
    /* ------smallest it will get */

    /* --FS: max(1.75rem, 3vh); */


    /* clamp(min, preferred, maximum) */
    /* ****************** */
    /* a combination of min() and max(),  clamp(minimum, preferred, maximum) */
    /* The clamp() function evaluates these values and selects the preferred value as long as it falls within the range defined by the minimum and maximum. If the preferred value goes below the minimum or above the maximum, it will “clamp” to those limits. */
    --FS: clamp(1.75rem, 3vh, 2.25rem);
    --FS-SM: clamp(1.25rem, 2vh, 1.5rem) --FS-XL: 3rem;

    /* COLOR */
    --BGCOLOR: #475569;
    --ALT-BGCOLOR: #1E293B;
    --RADIAL-COLOR: whitesmoke;
    --LIGHT-COLOR: whitesmoke;
    --DARK-COLOR: #000;

    /* SQUARE */
    --SQUARE-BGCOLOR: papayawhip;
    --SQUARE-SIZE: max(150px, 20vw);

    /* GENERAL */
    /* from lesson 20 variables */
    /* --PADDING: 0.5rem; */
    --PADDING: 0.5em;
    /* based on font size and not root */


    --SHADOWS: 0 6px 5px -5px var(--DARK-COLOR);
    --BORDERS: 2px solid var(--DARK-COLOR);
}

@media (prefers-color-scheme: dark) {
    :root {
        --BGCOLOR: #000;
        --ALT-BGCOLOR: #333;
        --RADIAL-COLOR: rgb(217, 217, 217);
        --SQUARE-BGCOLOR: rgb(202, 174, 202);
    }
}

/* 
@media (prefers-color-scheme: light) {
    :root {
        --BGCOLOR: #fff;
        --ALT-BGCOLOR: #eee;
        --RADIAL-COLOR: rgb(100, 100, 100);
        --SQUARE-BGCOLOR: rgb(150, 150, 150);
    }
} */

/* || GENERAL STYLES */
body {
    font: var(--FS) var(--FF);
    min-height: 100vh;

    background-color: var(--BGCOLOR);
    background-image: radial-gradient(var(--RADIAL-COLOR), var(--BGCOLOR));
    display: flex;
    flex-direction: column;
}

.h1lessontext {
    max-width: 100%;
    font-size: 1.3rem;
    text-align: center;
    margin: 0px 0 0px 0;
    padding: 5px;
    background-color: rgb(43, 173, 199);
    /* border: 1px solid var(--DARK-COLOR); */
    border: 5px solid blue;
}

header,
nav,
footer {
    display: grid;
    place-content: center;
    grid-template-columns: 100%;
    text-align: center;
}

header,
footer {
    position: sticky;
    background-color: var(--ALT-BGCOLOR);
    color: var(--LIGHT-COLOR);
}

header {
    top: 0;
}

nav {
    background-color: var(--LIGHT-COLOR);
    color: var(--DARK-COLOR);
    border-bottom: var(--BORDERS);
    box-shadow: var(--SHADOWS);

    /* from lesson 20 variables */
    /* padding: var(--PADDING); */
}

main {
    /* to use with flexbox first half of lesson 20 */

    /* flex-grow: 1;
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start; */

    /* padding: var(--PADDING); */
    /* moved to the main section */

    /* from lesson 20 variables */
    /* padding: 10px 0;
    flex-grow: 1;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    flex-flow: row wrap;
    gap: min(4vw, 15px); */

    /* to use with grid second half of lesson 20 */
    flex-grow: 1;
    padding: var(--PADDING);
    display: grid;
    grid-template-columns: repeat(4, minmax(100px, 300px));
    gap: min(2vw, 20px);
}

main section {
    flex-grow: 1;
    padding: var(--PADDING);
}

main aside {
    background-color: hsla(0, 0%, 20%, 0.8);
    color: var(--LIGHT-COLOR);
    font-size: var(--FS-SM);
    font-style: italic;
    padding: var(--PADDING);
}

.content {
    margin-top: 20px;
}

.tooltip {
    border-bottom: 1px dashed orange;
    position: relative;
}

.tooltip:hover::before {
    content: attr(data-tooltip);
    position: absolute;
    top: -30px;
    white-space: nowrap;
    background-color: var(--DARK-COLOR);
    padding: var(--PADDING);
    border-radius: 15px;
}

footer {
    bottom: 0;
}

a:any-link {
    color: firebrick;
}

a:hover,
a:focus {
    /* opacity: 0.6; */
    filter: brightness(150%);
    /* filter: hue-rotate(180deg); */
}


/* || FEATURES */

.square--highlight {
    --SQUARE-BGCOLOR: cornflowerblue;
}

.square {
    background-color: var(--SQUARE-BGCOLOR);
    /* width: var(--SQUARE-SIZE);
    height: var(--SQUARE-SIZE); */
    border: var(--BORDERS);
    border-radius: 15px;
    display: grid;
    place-content: center;
    font-size: var(--FS-XL);
    box-shadow: var(--SHADOWS);
}

@media screen and (min-width: 576px) {
    main {
        flex-flow: row nowrap;
        justify-content: space-between;
    }

    main section {
        width: calc(70% -5px);
    }

    main aside {
        width: calc(30% - 5px);
    }
}